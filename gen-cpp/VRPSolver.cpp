/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "VRPSolver.h"




VRPSolver_solveCVRP_args::~VRPSolver_solveCVRP_args() throw() {
}


uint32_t VRPSolver_solveCVRP_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vec.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->vec.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              {
                this->vec[_i4].clear();
                uint32_t _size5;
                ::apache::thrift::protocol::TType _etype8;
                xfer += iprot->readListBegin(_etype8, _size5);
                this->vec[_i4].resize(_size5);
                uint32_t _i9;
                for (_i9 = 0; _i9 < _size5; ++_i9)
                {
                  xfer += iprot->readI64(this->vec[_i4][_i9]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demands.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->demands.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->demands[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.demands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->v_caps.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->v_caps.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readI64(this->v_caps[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.v_caps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lns);
          this->__isset.lns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tm);
          this->__isset.tm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VRPSolver_solveCVRP_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VRPSolver_solveCVRP_args");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vec.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter20;
    for (_iter20 = this->vec.begin(); _iter20 != this->vec.end(); ++_iter20)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter20).size()));
        std::vector<int64_t> ::const_iterator _iter21;
        for (_iter21 = (*_iter20).begin(); _iter21 != (*_iter20).end(); ++_iter21)
        {
          xfer += oprot->writeI64((*_iter21));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->demands.size()));
    std::vector<int64_t> ::const_iterator _iter22;
    for (_iter22 = this->demands.begin(); _iter22 != this->demands.end(); ++_iter22)
    {
      xfer += oprot->writeI64((*_iter22));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->v_caps.size()));
    std::vector<int64_t> ::const_iterator _iter23;
    for (_iter23 = this->v_caps.begin(); _iter23 != this->v_caps.end(); ++_iter23)
    {
      xfer += oprot->writeI64((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lns", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->lns);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tm", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->tm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRP_pargs::~VRPSolver_solveCVRP_pargs() throw() {
}


uint32_t VRPSolver_solveCVRP_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VRPSolver_solveCVRP_pargs");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->vec)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter24;
    for (_iter24 = (*(this->vec)).begin(); _iter24 != (*(this->vec)).end(); ++_iter24)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter24).size()));
        std::vector<int64_t> ::const_iterator _iter25;
        for (_iter25 = (*_iter24).begin(); _iter25 != (*_iter24).end(); ++_iter25)
        {
          xfer += oprot->writeI64((*_iter25));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->demands)).size()));
    std::vector<int64_t> ::const_iterator _iter26;
    for (_iter26 = (*(this->demands)).begin(); _iter26 != (*(this->demands)).end(); ++_iter26)
    {
      xfer += oprot->writeI64((*_iter26));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->v_caps)).size()));
    std::vector<int64_t> ::const_iterator _iter27;
    for (_iter27 = (*(this->v_caps)).begin(); _iter27 != (*(this->v_caps)).end(); ++_iter27)
    {
      xfer += oprot->writeI64((*_iter27));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lns", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64((*(this->lns)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tm", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64((*(this->tm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRP_result::~VRPSolver_solveCVRP_result() throw() {
}


uint32_t VRPSolver_solveCVRP_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->success.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              {
                this->success[_i32].clear();
                uint32_t _size33;
                ::apache::thrift::protocol::TType _etype36;
                xfer += iprot->readListBegin(_etype36, _size33);
                this->success[_i32].resize(_size33);
                uint32_t _i37;
                for (_i37 = 0; _i37 < _size33; ++_i37)
                {
                  xfer += iprot->readI64(this->success[_i32][_i37]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VRPSolver_solveCVRP_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("VRPSolver_solveCVRP_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->success.size()));
      std::vector<std::vector<int64_t> > ::const_iterator _iter38;
      for (_iter38 = this->success.begin(); _iter38 != this->success.end(); ++_iter38)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter38).size()));
          std::vector<int64_t> ::const_iterator _iter39;
          for (_iter39 = (*_iter38).begin(); _iter39 != (*_iter38).end(); ++_iter39)
          {
            xfer += oprot->writeI64((*_iter39));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRP_presult::~VRPSolver_solveCVRP_presult() throw() {
}


uint32_t VRPSolver_solveCVRP_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            (*(this->success)).resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              {
                (*(this->success))[_i44].clear();
                uint32_t _size45;
                ::apache::thrift::protocol::TType _etype48;
                xfer += iprot->readListBegin(_etype48, _size45);
                (*(this->success))[_i44].resize(_size45);
                uint32_t _i49;
                for (_i49 = 0; _i49 < _size45; ++_i49)
                {
                  xfer += iprot->readI64((*(this->success))[_i44][_i49]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


VRPSolver_solveCVRPTW_args::~VRPSolver_solveCVRPTW_args() throw() {
}


uint32_t VRPSolver_solveCVRPTW_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vec.clear();
            uint32_t _size50;
            ::apache::thrift::protocol::TType _etype53;
            xfer += iprot->readListBegin(_etype53, _size50);
            this->vec.resize(_size50);
            uint32_t _i54;
            for (_i54 = 0; _i54 < _size50; ++_i54)
            {
              {
                this->vec[_i54].clear();
                uint32_t _size55;
                ::apache::thrift::protocol::TType _etype58;
                xfer += iprot->readListBegin(_etype58, _size55);
                this->vec[_i54].resize(_size55);
                uint32_t _i59;
                for (_i59 = 0; _i59 < _size55; ++_i59)
                {
                  xfer += iprot->readI64(this->vec[_i54][_i59]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demands.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->demands.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += iprot->readI64(this->demands[_i64]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.demands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->v_caps.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->v_caps.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readI64(this->v_caps[_i69]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.v_caps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timeWindows.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            xfer += iprot->readListBegin(_etype73, _size70);
            this->timeWindows.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              {
                this->timeWindows[_i74].clear();
                uint32_t _size75;
                ::apache::thrift::protocol::TType _etype78;
                xfer += iprot->readListBegin(_etype78, _size75);
                this->timeWindows[_i74].resize(_size75);
                uint32_t _i79;
                for (_i79 = 0; _i79 < _size75; ++_i79)
                {
                  xfer += iprot->readI64(this->timeWindows[_i74][_i79]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.timeWindows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceTime.clear();
            uint32_t _size80;
            ::apache::thrift::protocol::TType _etype83;
            xfer += iprot->readListBegin(_etype83, _size80);
            this->serviceTime.resize(_size80);
            uint32_t _i84;
            for (_i84 = 0; _i84 < _size80; ++_i84)
            {
              xfer += iprot->readI64(this->serviceTime[_i84]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lns);
          this->__isset.lns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tm);
          this->__isset.tm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VRPSolver_solveCVRPTW_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VRPSolver_solveCVRPTW_args");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vec.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter85;
    for (_iter85 = this->vec.begin(); _iter85 != this->vec.end(); ++_iter85)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter85).size()));
        std::vector<int64_t> ::const_iterator _iter86;
        for (_iter86 = (*_iter85).begin(); _iter86 != (*_iter85).end(); ++_iter86)
        {
          xfer += oprot->writeI64((*_iter86));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->demands.size()));
    std::vector<int64_t> ::const_iterator _iter87;
    for (_iter87 = this->demands.begin(); _iter87 != this->demands.end(); ++_iter87)
    {
      xfer += oprot->writeI64((*_iter87));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->v_caps.size()));
    std::vector<int64_t> ::const_iterator _iter88;
    for (_iter88 = this->v_caps.begin(); _iter88 != this->v_caps.end(); ++_iter88)
    {
      xfer += oprot->writeI64((*_iter88));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->timeWindows.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter89;
    for (_iter89 = this->timeWindows.begin(); _iter89 != this->timeWindows.end(); ++_iter89)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter89).size()));
        std::vector<int64_t> ::const_iterator _iter90;
        for (_iter90 = (*_iter89).begin(); _iter90 != (*_iter89).end(); ++_iter90)
        {
          xfer += oprot->writeI64((*_iter90));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->serviceTime.size()));
    std::vector<int64_t> ::const_iterator _iter91;
    for (_iter91 = this->serviceTime.begin(); _iter91 != this->serviceTime.end(); ++_iter91)
    {
      xfer += oprot->writeI64((*_iter91));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lns", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->lns);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tm", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->tm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRPTW_pargs::~VRPSolver_solveCVRPTW_pargs() throw() {
}


uint32_t VRPSolver_solveCVRPTW_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VRPSolver_solveCVRPTW_pargs");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->vec)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter92;
    for (_iter92 = (*(this->vec)).begin(); _iter92 != (*(this->vec)).end(); ++_iter92)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter92).size()));
        std::vector<int64_t> ::const_iterator _iter93;
        for (_iter93 = (*_iter92).begin(); _iter93 != (*_iter92).end(); ++_iter93)
        {
          xfer += oprot->writeI64((*_iter93));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->demands)).size()));
    std::vector<int64_t> ::const_iterator _iter94;
    for (_iter94 = (*(this->demands)).begin(); _iter94 != (*(this->demands)).end(); ++_iter94)
    {
      xfer += oprot->writeI64((*_iter94));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->v_caps)).size()));
    std::vector<int64_t> ::const_iterator _iter95;
    for (_iter95 = (*(this->v_caps)).begin(); _iter95 != (*(this->v_caps)).end(); ++_iter95)
    {
      xfer += oprot->writeI64((*_iter95));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->timeWindows)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter96;
    for (_iter96 = (*(this->timeWindows)).begin(); _iter96 != (*(this->timeWindows)).end(); ++_iter96)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter96).size()));
        std::vector<int64_t> ::const_iterator _iter97;
        for (_iter97 = (*_iter96).begin(); _iter97 != (*_iter96).end(); ++_iter97)
        {
          xfer += oprot->writeI64((*_iter97));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->serviceTime)).size()));
    std::vector<int64_t> ::const_iterator _iter98;
    for (_iter98 = (*(this->serviceTime)).begin(); _iter98 != (*(this->serviceTime)).end(); ++_iter98)
    {
      xfer += oprot->writeI64((*_iter98));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lns", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64((*(this->lns)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tm", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64((*(this->tm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRPTW_result::~VRPSolver_solveCVRPTW_result() throw() {
}


uint32_t VRPSolver_solveCVRPTW_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size99;
            ::apache::thrift::protocol::TType _etype102;
            xfer += iprot->readListBegin(_etype102, _size99);
            this->success.resize(_size99);
            uint32_t _i103;
            for (_i103 = 0; _i103 < _size99; ++_i103)
            {
              {
                this->success[_i103].clear();
                uint32_t _size104;
                ::apache::thrift::protocol::TType _etype107;
                xfer += iprot->readListBegin(_etype107, _size104);
                this->success[_i103].resize(_size104);
                uint32_t _i108;
                for (_i108 = 0; _i108 < _size104; ++_i108)
                {
                  xfer += iprot->readI64(this->success[_i103][_i108]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VRPSolver_solveCVRPTW_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("VRPSolver_solveCVRPTW_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->success.size()));
      std::vector<std::vector<int64_t> > ::const_iterator _iter109;
      for (_iter109 = this->success.begin(); _iter109 != this->success.end(); ++_iter109)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter109).size()));
          std::vector<int64_t> ::const_iterator _iter110;
          for (_iter110 = (*_iter109).begin(); _iter110 != (*_iter109).end(); ++_iter110)
          {
            xfer += oprot->writeI64((*_iter110));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRPTW_presult::~VRPSolver_solveCVRPTW_presult() throw() {
}


uint32_t VRPSolver_solveCVRPTW_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size111;
            ::apache::thrift::protocol::TType _etype114;
            xfer += iprot->readListBegin(_etype114, _size111);
            (*(this->success)).resize(_size111);
            uint32_t _i115;
            for (_i115 = 0; _i115 < _size111; ++_i115)
            {
              {
                (*(this->success))[_i115].clear();
                uint32_t _size116;
                ::apache::thrift::protocol::TType _etype119;
                xfer += iprot->readListBegin(_etype119, _size116);
                (*(this->success))[_i115].resize(_size116);
                uint32_t _i120;
                for (_i120 = 0; _i120 < _size116; ++_i120)
                {
                  xfer += iprot->readI64((*(this->success))[_i115][_i120]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


VRPSolver_solveCVRPTWMD_args::~VRPSolver_solveCVRPTWMD_args() throw() {
}


uint32_t VRPSolver_solveCVRPTWMD_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vec.clear();
            uint32_t _size121;
            ::apache::thrift::protocol::TType _etype124;
            xfer += iprot->readListBegin(_etype124, _size121);
            this->vec.resize(_size121);
            uint32_t _i125;
            for (_i125 = 0; _i125 < _size121; ++_i125)
            {
              {
                this->vec[_i125].clear();
                uint32_t _size126;
                ::apache::thrift::protocol::TType _etype129;
                xfer += iprot->readListBegin(_etype129, _size126);
                this->vec[_i125].resize(_size126);
                uint32_t _i130;
                for (_i130 = 0; _i130 < _size126; ++_i130)
                {
                  xfer += iprot->readI64(this->vec[_i125][_i130]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demands.clear();
            uint32_t _size131;
            ::apache::thrift::protocol::TType _etype134;
            xfer += iprot->readListBegin(_etype134, _size131);
            this->demands.resize(_size131);
            uint32_t _i135;
            for (_i135 = 0; _i135 < _size131; ++_i135)
            {
              xfer += iprot->readI64(this->demands[_i135]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.demands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->v_caps.clear();
            uint32_t _size136;
            ::apache::thrift::protocol::TType _etype139;
            xfer += iprot->readListBegin(_etype139, _size136);
            this->v_caps.resize(_size136);
            uint32_t _i140;
            for (_i140 = 0; _i140 < _size136; ++_i140)
            {
              xfer += iprot->readI64(this->v_caps[_i140]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.v_caps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timeWindows.clear();
            uint32_t _size141;
            ::apache::thrift::protocol::TType _etype144;
            xfer += iprot->readListBegin(_etype144, _size141);
            this->timeWindows.resize(_size141);
            uint32_t _i145;
            for (_i145 = 0; _i145 < _size141; ++_i145)
            {
              {
                this->timeWindows[_i145].clear();
                uint32_t _size146;
                ::apache::thrift::protocol::TType _etype149;
                xfer += iprot->readListBegin(_etype149, _size146);
                this->timeWindows[_i145].resize(_size146);
                uint32_t _i150;
                for (_i150 = 0; _i150 < _size146; ++_i150)
                {
                  xfer += iprot->readI64(this->timeWindows[_i145][_i150]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.timeWindows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceTime.clear();
            uint32_t _size151;
            ::apache::thrift::protocol::TType _etype154;
            xfer += iprot->readListBegin(_etype154, _size151);
            this->serviceTime.resize(_size151);
            uint32_t _i155;
            for (_i155 = 0; _i155 < _size151; ++_i155)
            {
              xfer += iprot->readI64(this->serviceTime[_i155]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->depots.clear();
            uint32_t _size156;
            ::apache::thrift::protocol::TType _etype159;
            xfer += iprot->readListBegin(_etype159, _size156);
            this->depots.resize(_size156);
            uint32_t _i160;
            for (_i160 = 0; _i160 < _size156; ++_i160)
            {
              {
                this->depots[_i160].clear();
                uint32_t _size161;
                ::apache::thrift::protocol::TType _etype164;
                xfer += iprot->readListBegin(_etype164, _size161);
                this->depots[_i160].resize(_size161);
                uint32_t _i165;
                for (_i165 = 0; _i165 < _size161; ++_i165)
                {
                  xfer += iprot->readI64(this->depots[_i160][_i165]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.depots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lns);
          this->__isset.lns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tm);
          this->__isset.tm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VRPSolver_solveCVRPTWMD_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VRPSolver_solveCVRPTWMD_args");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vec.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter166;
    for (_iter166 = this->vec.begin(); _iter166 != this->vec.end(); ++_iter166)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter166).size()));
        std::vector<int64_t> ::const_iterator _iter167;
        for (_iter167 = (*_iter166).begin(); _iter167 != (*_iter166).end(); ++_iter167)
        {
          xfer += oprot->writeI64((*_iter167));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->demands.size()));
    std::vector<int64_t> ::const_iterator _iter168;
    for (_iter168 = this->demands.begin(); _iter168 != this->demands.end(); ++_iter168)
    {
      xfer += oprot->writeI64((*_iter168));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->v_caps.size()));
    std::vector<int64_t> ::const_iterator _iter169;
    for (_iter169 = this->v_caps.begin(); _iter169 != this->v_caps.end(); ++_iter169)
    {
      xfer += oprot->writeI64((*_iter169));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->timeWindows.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter170;
    for (_iter170 = this->timeWindows.begin(); _iter170 != this->timeWindows.end(); ++_iter170)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter170).size()));
        std::vector<int64_t> ::const_iterator _iter171;
        for (_iter171 = (*_iter170).begin(); _iter171 != (*_iter170).end(); ++_iter171)
        {
          xfer += oprot->writeI64((*_iter171));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->serviceTime.size()));
    std::vector<int64_t> ::const_iterator _iter172;
    for (_iter172 = this->serviceTime.begin(); _iter172 != this->serviceTime.end(); ++_iter172)
    {
      xfer += oprot->writeI64((*_iter172));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depots", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->depots.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter173;
    for (_iter173 = this->depots.begin(); _iter173 != this->depots.end(); ++_iter173)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter173).size()));
        std::vector<int64_t> ::const_iterator _iter174;
        for (_iter174 = (*_iter173).begin(); _iter174 != (*_iter173).end(); ++_iter174)
        {
          xfer += oprot->writeI64((*_iter174));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lns", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->lns);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tm", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->tm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRPTWMD_pargs::~VRPSolver_solveCVRPTWMD_pargs() throw() {
}


uint32_t VRPSolver_solveCVRPTWMD_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VRPSolver_solveCVRPTWMD_pargs");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->vec)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter175;
    for (_iter175 = (*(this->vec)).begin(); _iter175 != (*(this->vec)).end(); ++_iter175)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter175).size()));
        std::vector<int64_t> ::const_iterator _iter176;
        for (_iter176 = (*_iter175).begin(); _iter176 != (*_iter175).end(); ++_iter176)
        {
          xfer += oprot->writeI64((*_iter176));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->demands)).size()));
    std::vector<int64_t> ::const_iterator _iter177;
    for (_iter177 = (*(this->demands)).begin(); _iter177 != (*(this->demands)).end(); ++_iter177)
    {
      xfer += oprot->writeI64((*_iter177));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->v_caps)).size()));
    std::vector<int64_t> ::const_iterator _iter178;
    for (_iter178 = (*(this->v_caps)).begin(); _iter178 != (*(this->v_caps)).end(); ++_iter178)
    {
      xfer += oprot->writeI64((*_iter178));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->timeWindows)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter179;
    for (_iter179 = (*(this->timeWindows)).begin(); _iter179 != (*(this->timeWindows)).end(); ++_iter179)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter179).size()));
        std::vector<int64_t> ::const_iterator _iter180;
        for (_iter180 = (*_iter179).begin(); _iter180 != (*_iter179).end(); ++_iter180)
        {
          xfer += oprot->writeI64((*_iter180));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->serviceTime)).size()));
    std::vector<int64_t> ::const_iterator _iter181;
    for (_iter181 = (*(this->serviceTime)).begin(); _iter181 != (*(this->serviceTime)).end(); ++_iter181)
    {
      xfer += oprot->writeI64((*_iter181));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depots", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->depots)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter182;
    for (_iter182 = (*(this->depots)).begin(); _iter182 != (*(this->depots)).end(); ++_iter182)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter182).size()));
        std::vector<int64_t> ::const_iterator _iter183;
        for (_iter183 = (*_iter182).begin(); _iter183 != (*_iter182).end(); ++_iter183)
        {
          xfer += oprot->writeI64((*_iter183));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lns", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64((*(this->lns)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tm", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64((*(this->tm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRPTWMD_result::~VRPSolver_solveCVRPTWMD_result() throw() {
}


uint32_t VRPSolver_solveCVRPTWMD_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size184;
            ::apache::thrift::protocol::TType _etype187;
            xfer += iprot->readListBegin(_etype187, _size184);
            this->success.resize(_size184);
            uint32_t _i188;
            for (_i188 = 0; _i188 < _size184; ++_i188)
            {
              {
                this->success[_i188].clear();
                uint32_t _size189;
                ::apache::thrift::protocol::TType _etype192;
                xfer += iprot->readListBegin(_etype192, _size189);
                this->success[_i188].resize(_size189);
                uint32_t _i193;
                for (_i193 = 0; _i193 < _size189; ++_i193)
                {
                  xfer += iprot->readI64(this->success[_i188][_i193]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VRPSolver_solveCVRPTWMD_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("VRPSolver_solveCVRPTWMD_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->success.size()));
      std::vector<std::vector<int64_t> > ::const_iterator _iter194;
      for (_iter194 = this->success.begin(); _iter194 != this->success.end(); ++_iter194)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter194).size()));
          std::vector<int64_t> ::const_iterator _iter195;
          for (_iter195 = (*_iter194).begin(); _iter195 != (*_iter194).end(); ++_iter195)
          {
            xfer += oprot->writeI64((*_iter195));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRPTWMD_presult::~VRPSolver_solveCVRPTWMD_presult() throw() {
}


uint32_t VRPSolver_solveCVRPTWMD_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size196;
            ::apache::thrift::protocol::TType _etype199;
            xfer += iprot->readListBegin(_etype199, _size196);
            (*(this->success)).resize(_size196);
            uint32_t _i200;
            for (_i200 = 0; _i200 < _size196; ++_i200)
            {
              {
                (*(this->success))[_i200].clear();
                uint32_t _size201;
                ::apache::thrift::protocol::TType _etype204;
                xfer += iprot->readListBegin(_etype204, _size201);
                (*(this->success))[_i200].resize(_size201);
                uint32_t _i205;
                for (_i205 = 0; _i205 < _size201; ++_i205)
                {
                  xfer += iprot->readI64((*(this->success))[_i200][_i205]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


VRPSolver_solveCVRPTWPD_args::~VRPSolver_solveCVRPTWPD_args() throw() {
}


uint32_t VRPSolver_solveCVRPTWPD_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vec.clear();
            uint32_t _size206;
            ::apache::thrift::protocol::TType _etype209;
            xfer += iprot->readListBegin(_etype209, _size206);
            this->vec.resize(_size206);
            uint32_t _i210;
            for (_i210 = 0; _i210 < _size206; ++_i210)
            {
              {
                this->vec[_i210].clear();
                uint32_t _size211;
                ::apache::thrift::protocol::TType _etype214;
                xfer += iprot->readListBegin(_etype214, _size211);
                this->vec[_i210].resize(_size211);
                uint32_t _i215;
                for (_i215 = 0; _i215 < _size211; ++_i215)
                {
                  xfer += iprot->readI64(this->vec[_i210][_i215]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demands.clear();
            uint32_t _size216;
            ::apache::thrift::protocol::TType _etype219;
            xfer += iprot->readListBegin(_etype219, _size216);
            this->demands.resize(_size216);
            uint32_t _i220;
            for (_i220 = 0; _i220 < _size216; ++_i220)
            {
              xfer += iprot->readI64(this->demands[_i220]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.demands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->v_caps.clear();
            uint32_t _size221;
            ::apache::thrift::protocol::TType _etype224;
            xfer += iprot->readListBegin(_etype224, _size221);
            this->v_caps.resize(_size221);
            uint32_t _i225;
            for (_i225 = 0; _i225 < _size221; ++_i225)
            {
              xfer += iprot->readI64(this->v_caps[_i225]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.v_caps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timeWindows.clear();
            uint32_t _size226;
            ::apache::thrift::protocol::TType _etype229;
            xfer += iprot->readListBegin(_etype229, _size226);
            this->timeWindows.resize(_size226);
            uint32_t _i230;
            for (_i230 = 0; _i230 < _size226; ++_i230)
            {
              {
                this->timeWindows[_i230].clear();
                uint32_t _size231;
                ::apache::thrift::protocol::TType _etype234;
                xfer += iprot->readListBegin(_etype234, _size231);
                this->timeWindows[_i230].resize(_size231);
                uint32_t _i235;
                for (_i235 = 0; _i235 < _size231; ++_i235)
                {
                  xfer += iprot->readI64(this->timeWindows[_i230][_i235]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.timeWindows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceTime.clear();
            uint32_t _size236;
            ::apache::thrift::protocol::TType _etype239;
            xfer += iprot->readListBegin(_etype239, _size236);
            this->serviceTime.resize(_size236);
            uint32_t _i240;
            for (_i240 = 0; _i240 < _size236; ++_i240)
            {
              xfer += iprot->readI64(this->serviceTime[_i240]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pickups.clear();
            uint32_t _size241;
            ::apache::thrift::protocol::TType _etype244;
            xfer += iprot->readListBegin(_etype244, _size241);
            this->pickups.resize(_size241);
            uint32_t _i245;
            for (_i245 = 0; _i245 < _size241; ++_i245)
            {
              xfer += iprot->readI64(this->pickups[_i245]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pickups = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->delivs.clear();
            uint32_t _size246;
            ::apache::thrift::protocol::TType _etype249;
            xfer += iprot->readListBegin(_etype249, _size246);
            this->delivs.resize(_size246);
            uint32_t _i250;
            for (_i250 = 0; _i250 < _size246; ++_i250)
            {
              xfer += iprot->readI64(this->delivs[_i250]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.delivs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lns);
          this->__isset.lns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tm);
          this->__isset.tm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VRPSolver_solveCVRPTWPD_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VRPSolver_solveCVRPTWPD_args");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vec.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter251;
    for (_iter251 = this->vec.begin(); _iter251 != this->vec.end(); ++_iter251)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter251).size()));
        std::vector<int64_t> ::const_iterator _iter252;
        for (_iter252 = (*_iter251).begin(); _iter252 != (*_iter251).end(); ++_iter252)
        {
          xfer += oprot->writeI64((*_iter252));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->demands.size()));
    std::vector<int64_t> ::const_iterator _iter253;
    for (_iter253 = this->demands.begin(); _iter253 != this->demands.end(); ++_iter253)
    {
      xfer += oprot->writeI64((*_iter253));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->v_caps.size()));
    std::vector<int64_t> ::const_iterator _iter254;
    for (_iter254 = this->v_caps.begin(); _iter254 != this->v_caps.end(); ++_iter254)
    {
      xfer += oprot->writeI64((*_iter254));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->timeWindows.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter255;
    for (_iter255 = this->timeWindows.begin(); _iter255 != this->timeWindows.end(); ++_iter255)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter255).size()));
        std::vector<int64_t> ::const_iterator _iter256;
        for (_iter256 = (*_iter255).begin(); _iter256 != (*_iter255).end(); ++_iter256)
        {
          xfer += oprot->writeI64((*_iter256));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->serviceTime.size()));
    std::vector<int64_t> ::const_iterator _iter257;
    for (_iter257 = this->serviceTime.begin(); _iter257 != this->serviceTime.end(); ++_iter257)
    {
      xfer += oprot->writeI64((*_iter257));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pickups", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->pickups.size()));
    std::vector<int64_t> ::const_iterator _iter258;
    for (_iter258 = this->pickups.begin(); _iter258 != this->pickups.end(); ++_iter258)
    {
      xfer += oprot->writeI64((*_iter258));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delivs", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->delivs.size()));
    std::vector<int64_t> ::const_iterator _iter259;
    for (_iter259 = this->delivs.begin(); _iter259 != this->delivs.end(); ++_iter259)
    {
      xfer += oprot->writeI64((*_iter259));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lns", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->lns);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tm", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->tm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRPTWPD_pargs::~VRPSolver_solveCVRPTWPD_pargs() throw() {
}


uint32_t VRPSolver_solveCVRPTWPD_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VRPSolver_solveCVRPTWPD_pargs");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->vec)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter260;
    for (_iter260 = (*(this->vec)).begin(); _iter260 != (*(this->vec)).end(); ++_iter260)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter260).size()));
        std::vector<int64_t> ::const_iterator _iter261;
        for (_iter261 = (*_iter260).begin(); _iter261 != (*_iter260).end(); ++_iter261)
        {
          xfer += oprot->writeI64((*_iter261));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->demands)).size()));
    std::vector<int64_t> ::const_iterator _iter262;
    for (_iter262 = (*(this->demands)).begin(); _iter262 != (*(this->demands)).end(); ++_iter262)
    {
      xfer += oprot->writeI64((*_iter262));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->v_caps)).size()));
    std::vector<int64_t> ::const_iterator _iter263;
    for (_iter263 = (*(this->v_caps)).begin(); _iter263 != (*(this->v_caps)).end(); ++_iter263)
    {
      xfer += oprot->writeI64((*_iter263));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->timeWindows)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter264;
    for (_iter264 = (*(this->timeWindows)).begin(); _iter264 != (*(this->timeWindows)).end(); ++_iter264)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter264).size()));
        std::vector<int64_t> ::const_iterator _iter265;
        for (_iter265 = (*_iter264).begin(); _iter265 != (*_iter264).end(); ++_iter265)
        {
          xfer += oprot->writeI64((*_iter265));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->serviceTime)).size()));
    std::vector<int64_t> ::const_iterator _iter266;
    for (_iter266 = (*(this->serviceTime)).begin(); _iter266 != (*(this->serviceTime)).end(); ++_iter266)
    {
      xfer += oprot->writeI64((*_iter266));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pickups", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->pickups)).size()));
    std::vector<int64_t> ::const_iterator _iter267;
    for (_iter267 = (*(this->pickups)).begin(); _iter267 != (*(this->pickups)).end(); ++_iter267)
    {
      xfer += oprot->writeI64((*_iter267));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delivs", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->delivs)).size()));
    std::vector<int64_t> ::const_iterator _iter268;
    for (_iter268 = (*(this->delivs)).begin(); _iter268 != (*(this->delivs)).end(); ++_iter268)
    {
      xfer += oprot->writeI64((*_iter268));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lns", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64((*(this->lns)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tm", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64((*(this->tm)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRPTWPD_result::~VRPSolver_solveCVRPTWPD_result() throw() {
}


uint32_t VRPSolver_solveCVRPTWPD_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size269;
            ::apache::thrift::protocol::TType _etype272;
            xfer += iprot->readListBegin(_etype272, _size269);
            this->success.resize(_size269);
            uint32_t _i273;
            for (_i273 = 0; _i273 < _size269; ++_i273)
            {
              {
                this->success[_i273].clear();
                uint32_t _size274;
                ::apache::thrift::protocol::TType _etype277;
                xfer += iprot->readListBegin(_etype277, _size274);
                this->success[_i273].resize(_size274);
                uint32_t _i278;
                for (_i278 = 0; _i278 < _size274; ++_i278)
                {
                  xfer += iprot->readI64(this->success[_i273][_i278]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VRPSolver_solveCVRPTWPD_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("VRPSolver_solveCVRPTWPD_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->success.size()));
      std::vector<std::vector<int64_t> > ::const_iterator _iter279;
      for (_iter279 = this->success.begin(); _iter279 != this->success.end(); ++_iter279)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter279).size()));
          std::vector<int64_t> ::const_iterator _iter280;
          for (_iter280 = (*_iter279).begin(); _iter280 != (*_iter279).end(); ++_iter280)
          {
            xfer += oprot->writeI64((*_iter280));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


VRPSolver_solveCVRPTWPD_presult::~VRPSolver_solveCVRPTWPD_presult() throw() {
}


uint32_t VRPSolver_solveCVRPTWPD_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size281;
            ::apache::thrift::protocol::TType _etype284;
            xfer += iprot->readListBegin(_etype284, _size281);
            (*(this->success)).resize(_size281);
            uint32_t _i285;
            for (_i285 = 0; _i285 < _size281; ++_i285)
            {
              {
                (*(this->success))[_i285].clear();
                uint32_t _size286;
                ::apache::thrift::protocol::TType _etype289;
                xfer += iprot->readListBegin(_etype289, _size286);
                (*(this->success))[_i285].resize(_size286);
                uint32_t _i290;
                for (_i290 = 0; _i290 < _size286; ++_i290)
                {
                  xfer += iprot->readI64((*(this->success))[_i285][_i290]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void VRPSolverClient::solveCVRP(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const int64_t lns, const int64_t tm)
{
  send_solveCVRP(vec, demands, v_caps, lns, tm);
  recv_solveCVRP(_return);
}

void VRPSolverClient::send_solveCVRP(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const int64_t lns, const int64_t tm)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("solveCVRP", ::apache::thrift::protocol::T_CALL, cseqid);

  VRPSolver_solveCVRP_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.lns = &lns;
  args.tm = &tm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void VRPSolverClient::recv_solveCVRP(std::vector<std::vector<int64_t> > & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("solveCVRP") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  VRPSolver_solveCVRP_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRP failed: unknown result");
}

void VRPSolverClient::solveCVRPTW(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const int64_t lns, const int64_t tm)
{
  send_solveCVRPTW(vec, demands, v_caps, timeWindows, serviceTime, lns, tm);
  recv_solveCVRPTW(_return);
}

void VRPSolverClient::send_solveCVRPTW(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const int64_t lns, const int64_t tm)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("solveCVRPTW", ::apache::thrift::protocol::T_CALL, cseqid);

  VRPSolver_solveCVRPTW_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.lns = &lns;
  args.tm = &tm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void VRPSolverClient::recv_solveCVRPTW(std::vector<std::vector<int64_t> > & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("solveCVRPTW") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  VRPSolver_solveCVRPTW_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTW failed: unknown result");
}

void VRPSolverClient::solveCVRPTWMD(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & depots, const int64_t lns, const int64_t tm)
{
  send_solveCVRPTWMD(vec, demands, v_caps, timeWindows, serviceTime, depots, lns, tm);
  recv_solveCVRPTWMD(_return);
}

void VRPSolverClient::send_solveCVRPTWMD(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & depots, const int64_t lns, const int64_t tm)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("solveCVRPTWMD", ::apache::thrift::protocol::T_CALL, cseqid);

  VRPSolver_solveCVRPTWMD_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.depots = &depots;
  args.lns = &lns;
  args.tm = &tm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void VRPSolverClient::recv_solveCVRPTWMD(std::vector<std::vector<int64_t> > & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("solveCVRPTWMD") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  VRPSolver_solveCVRPTWMD_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTWMD failed: unknown result");
}

void VRPSolverClient::solveCVRPTWPD(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<int64_t> & pickups, const std::vector<int64_t> & delivs, const int64_t lns, const int64_t tm)
{
  send_solveCVRPTWPD(vec, demands, v_caps, timeWindows, serviceTime, pickups, delivs, lns, tm);
  recv_solveCVRPTWPD(_return);
}

void VRPSolverClient::send_solveCVRPTWPD(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<int64_t> & pickups, const std::vector<int64_t> & delivs, const int64_t lns, const int64_t tm)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("solveCVRPTWPD", ::apache::thrift::protocol::T_CALL, cseqid);

  VRPSolver_solveCVRPTWPD_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.pickups = &pickups;
  args.delivs = &delivs;
  args.lns = &lns;
  args.tm = &tm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void VRPSolverClient::recv_solveCVRPTWPD(std::vector<std::vector<int64_t> > & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("solveCVRPTWPD") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  VRPSolver_solveCVRPTWPD_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTWPD failed: unknown result");
}

bool VRPSolverProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void VRPSolverProcessor::process_solveCVRP(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("VRPSolver.solveCVRP", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "VRPSolver.solveCVRP");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "VRPSolver.solveCVRP");
  }

  VRPSolver_solveCVRP_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "VRPSolver.solveCVRP", bytes);
  }

  VRPSolver_solveCVRP_result result;
  try {
    iface_->solveCVRP(result.success, args.vec, args.demands, args.v_caps, args.lns, args.tm);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "VRPSolver.solveCVRP");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("solveCVRP", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "VRPSolver.solveCVRP");
  }

  oprot->writeMessageBegin("solveCVRP", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "VRPSolver.solveCVRP", bytes);
  }
}

void VRPSolverProcessor::process_solveCVRPTW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("VRPSolver.solveCVRPTW", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "VRPSolver.solveCVRPTW");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "VRPSolver.solveCVRPTW");
  }

  VRPSolver_solveCVRPTW_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "VRPSolver.solveCVRPTW", bytes);
  }

  VRPSolver_solveCVRPTW_result result;
  try {
    iface_->solveCVRPTW(result.success, args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime, args.lns, args.tm);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "VRPSolver.solveCVRPTW");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("solveCVRPTW", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "VRPSolver.solveCVRPTW");
  }

  oprot->writeMessageBegin("solveCVRPTW", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "VRPSolver.solveCVRPTW", bytes);
  }
}

void VRPSolverProcessor::process_solveCVRPTWMD(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("VRPSolver.solveCVRPTWMD", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "VRPSolver.solveCVRPTWMD");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "VRPSolver.solveCVRPTWMD");
  }

  VRPSolver_solveCVRPTWMD_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "VRPSolver.solveCVRPTWMD", bytes);
  }

  VRPSolver_solveCVRPTWMD_result result;
  try {
    iface_->solveCVRPTWMD(result.success, args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime, args.depots, args.lns, args.tm);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "VRPSolver.solveCVRPTWMD");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("solveCVRPTWMD", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "VRPSolver.solveCVRPTWMD");
  }

  oprot->writeMessageBegin("solveCVRPTWMD", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "VRPSolver.solveCVRPTWMD", bytes);
  }
}

void VRPSolverProcessor::process_solveCVRPTWPD(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("VRPSolver.solveCVRPTWPD", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "VRPSolver.solveCVRPTWPD");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "VRPSolver.solveCVRPTWPD");
  }

  VRPSolver_solveCVRPTWPD_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "VRPSolver.solveCVRPTWPD", bytes);
  }

  VRPSolver_solveCVRPTWPD_result result;
  try {
    iface_->solveCVRPTWPD(result.success, args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime, args.pickups, args.delivs, args.lns, args.tm);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "VRPSolver.solveCVRPTWPD");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("solveCVRPTWPD", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "VRPSolver.solveCVRPTWPD");
  }

  oprot->writeMessageBegin("solveCVRPTWPD", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "VRPSolver.solveCVRPTWPD", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > VRPSolverProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< VRPSolverIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< VRPSolverIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new VRPSolverProcessor(handler));
  return processor;
}

void VRPSolverConcurrentClient::solveCVRP(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const int64_t lns, const int64_t tm)
{
  int32_t seqid = send_solveCVRP(vec, demands, v_caps, lns, tm);
  recv_solveCVRP(_return, seqid);
}

int32_t VRPSolverConcurrentClient::send_solveCVRP(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const int64_t lns, const int64_t tm)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("solveCVRP", ::apache::thrift::protocol::T_CALL, cseqid);

  VRPSolver_solveCVRP_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.lns = &lns;
  args.tm = &tm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void VRPSolverConcurrentClient::recv_solveCVRP(std::vector<std::vector<int64_t> > & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("solveCVRP") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      VRPSolver_solveCVRP_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRP failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void VRPSolverConcurrentClient::solveCVRPTW(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const int64_t lns, const int64_t tm)
{
  int32_t seqid = send_solveCVRPTW(vec, demands, v_caps, timeWindows, serviceTime, lns, tm);
  recv_solveCVRPTW(_return, seqid);
}

int32_t VRPSolverConcurrentClient::send_solveCVRPTW(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const int64_t lns, const int64_t tm)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("solveCVRPTW", ::apache::thrift::protocol::T_CALL, cseqid);

  VRPSolver_solveCVRPTW_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.lns = &lns;
  args.tm = &tm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void VRPSolverConcurrentClient::recv_solveCVRPTW(std::vector<std::vector<int64_t> > & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("solveCVRPTW") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      VRPSolver_solveCVRPTW_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTW failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void VRPSolverConcurrentClient::solveCVRPTWMD(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & depots, const int64_t lns, const int64_t tm)
{
  int32_t seqid = send_solveCVRPTWMD(vec, demands, v_caps, timeWindows, serviceTime, depots, lns, tm);
  recv_solveCVRPTWMD(_return, seqid);
}

int32_t VRPSolverConcurrentClient::send_solveCVRPTWMD(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & depots, const int64_t lns, const int64_t tm)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("solveCVRPTWMD", ::apache::thrift::protocol::T_CALL, cseqid);

  VRPSolver_solveCVRPTWMD_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.depots = &depots;
  args.lns = &lns;
  args.tm = &tm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void VRPSolverConcurrentClient::recv_solveCVRPTWMD(std::vector<std::vector<int64_t> > & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("solveCVRPTWMD") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      VRPSolver_solveCVRPTWMD_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTWMD failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void VRPSolverConcurrentClient::solveCVRPTWPD(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<int64_t> & pickups, const std::vector<int64_t> & delivs, const int64_t lns, const int64_t tm)
{
  int32_t seqid = send_solveCVRPTWPD(vec, demands, v_caps, timeWindows, serviceTime, pickups, delivs, lns, tm);
  recv_solveCVRPTWPD(_return, seqid);
}

int32_t VRPSolverConcurrentClient::send_solveCVRPTWPD(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<int64_t> & pickups, const std::vector<int64_t> & delivs, const int64_t lns, const int64_t tm)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("solveCVRPTWPD", ::apache::thrift::protocol::T_CALL, cseqid);

  VRPSolver_solveCVRPTWPD_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.pickups = &pickups;
  args.delivs = &delivs;
  args.lns = &lns;
  args.tm = &tm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void VRPSolverConcurrentClient::recv_solveCVRPTWPD(std::vector<std::vector<int64_t> > & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("solveCVRPTWPD") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      VRPSolver_solveCVRPTWPD_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTWPD failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}



